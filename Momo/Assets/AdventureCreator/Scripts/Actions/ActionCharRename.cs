/*
 *
 *	Adventure Creator
 *	by Chris Burton, 2013-2020
 *	
 *	"ActionCharRename.cs"
 * 
 *	This action renames Hotspots. A "Remember NPC" script needs to be
 *	attached to the Character unless it is a Player prefab.
 * 
 */

using UnityEngine;
using System.Collections.Generic;

#if UNITY_EDITOR
using UnityEditor;
#endif

namespace AC
{

	[System.Serializable]
	public class ActionCharRename : Action, ITranslatable
	{
		
		public int _charID = 0;
		public Char _char;
		public bool isPlayer;
		protected Char runtimeChar;

		public string newName;
		public int lineID = -1;


		public ActionCharRename ()
		{
			this.isDisplayed = true;
			category = ActionCategory.Character;
			title = "Rename";
			lineID = -1;
			description = "Changes the display name of a Character when subtitles are used.";
		}
		
		
		public override void AssignValues (List<ActionParameter> parameters)
		{
			runtimeChar = AssignFile <Char> (_charID, _char);

			if (isPlayer)
			{
				runtimeChar = KickStarter.player;
			}
		}
		
		
		public override float Run ()
		{
			if (runtimeChar && !string.IsNullOrEmpty (newName))
			{
				runtimeChar.SetName (newName, lineID);
			}
			
			return 0f;
		}
		
		
		#if UNITY_EDITOR
		
		public override void ShowGUI (List<ActionParameter> parameters)
		{
			isPlayer = EditorGUILayout.Toggle ("Is Player?", isPlayer);
			if (!isPlayer)
			{
				_char = (Char) EditorGUILayout.ObjectField ("Character:", _char, typeof (Char), true);
				
				_charID = FieldToID <Char> (_char, _charID);
				_char = IDToField <Char> (_char, _charID, true);
			}
			
			newName = EditorGUILayout.TextField ("New name:", newName);
			
			AfterRunningOption ();
		}


		public override void AssignConstantIDs (bool saveScriptsToo, bool fromAssetFile)
		{
			if (!isPlayer)
			{
				if (saveScriptsToo)
				{
					if (_char != null && _char.GetComponent <NPC>())
					{
						AddSaveScript <RememberNPC> (_char);
					}
				}

				AssignConstantID <Char> (_char, _charID, 0);
			}
		}

		
		public override string SetLabel ()
		{
			if (_char != null && !string.IsNullOrEmpty (newName))
			{
				return _char.name + " to " + newName;
			}
			return string.Empty;
		}


		public override bool ReferencesObjectOrID (GameObject _gameObject, int id)
		{
			if (!isPlayer)
			{
				if (_char != null && _char.gameObject == _gameObject) return true;
				if (_charID == id) return true;
			}
			if (isPlayer && _gameObject.GetComponent <Player>() != null) return true;
			return false;
		}

		#endif


		#region ITranslatable

		public string GetTranslatableString (int index)
		{
			return newName;
		}


		public int GetTranslationID (int index)
		{
			return lineID;
		}


		#if UNITY_EDITOR

		public int GetNumTranslatables ()
		{
			return 1;
		}


		public bool HasExistingTranslation (int index)
		{
			return (lineID > -1);
		}


		public void SetTranslationID (int index, int _lineID)
		{
			lineID = _lineID;
		}


		public string GetOwner (int index)
		{
			return string.Empty;
		}


		public bool OwnerIsPlayer (int index)
		{
			return isPlayer;
		}


		public AC_TextType GetTranslationType (int index)
		{
			return AC_TextType.Hotspot;
		}


		public bool CanTranslate (int index)
		{
			return (!string.IsNullOrEmpty (newName));
		}

		#endif

		#endregion


		/**
		 * <summary>Creates a new instance of the 'Character: Rename' Action with key variables already set.</summary>
		 * <param name = "characterToRename">The character to rename</param>
		 * <param name = "newName">The character's new name</param>
		 * <param name = "translationIDs">The line's translation ID number, as generated by the Speech Manager</param>
		 * <returns>The generated Action</returns>
		 */
		public static ActionCharRename CreateNew (Char characterToRename, string newName, int translationID = -1)
		{
			ActionCharRename newAction = (ActionCharRename) CreateInstance <ActionCharRename>();
			newAction._char = characterToRename;
			newAction.newName = newName;
			newAction.lineID = translationID;
			return newAction;
		}

	}

}